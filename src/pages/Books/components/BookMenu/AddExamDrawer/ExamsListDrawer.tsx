import React, { useState, useEffect } from 'react';
import { Drawer, Input, Button, Table, Space, Badge, message, Spin, Empty, Tag, Alert } from 'antd';
import { SearchOutlined, CopyOutlined, LoadingOutlined } from '@ant-design/icons';
import axios from 'axios';

interface ExamsListDrawerProps {
  open: boolean;
  onClose: () => void;
  onSelectExams: (selectedExams: any[]) => void;
}

interface Exam {
  id: string;
  title: string;
  code_id: string;
  total_question: number;
  active: boolean;
  created_at: string;
  updated_at: string;
  deleted_at: null;
  subject: string;
  description: string | null;
  cover: string | null;
  file_upload: string | null;
  status_exam: string;
  user_id: string;
}

interface ApiResponse {
  messages: string;
  data: {
    data: Exam[];
    pagination: {
      current_page: number;
      total_pages: number;
      take: number;
      total: number;
    }
  };
  status_code: number;
}

// Th√™m debounce function ƒë·ªÉ tr√°nh g·ªçi API li√™n t·ª•c khi ng∆∞·ªùi d√πng nh·∫≠p
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
};

const ExamsListDrawer: React.FC<ExamsListDrawerProps> = ({
  open,
  onClose,
  onSelectExams
}) => {
  const [searchText, setSearchText] = useState<string>('');
  const debouncedSearchText = useDebounce(searchText, 500); // 500ms debounce
  const [exams, setExams] = useState<Exam[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [pagination, setPagination] = useState({
    current: 1,
    pageSize: 10,
    total: 0
  });
  const [isSearching, setIsSearching] = useState<boolean>(false);

  const fetchExams = async (page = 1, searchTerm = '') => {
    setLoading(true);
    try {
      // Use the API endpoint and auth token from the curl command
      const token = localStorage.getItem('token') || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlMDZjYjQ4Zi01ZDM2LTQ2YjEtOThmMy1lNTc0ZmNiZWZmZmUiLCJpYXQiOjE3NDE1MzY4MzksImV4cCI6MTc0MjE0MTYzOX0.bkgEGRLhRkaGIolE38unbPZbLUkA77uDncPzFcQgSsc';
      
      console.log(`üîç T√¨m ki·∫øm b·ªô ƒë·ªÅ v·ªõi t·ª´ kh√≥a: "${searchTerm}"`);

      if (searchTerm) {
        message.loading({ content: `ƒêang t√¨m ki·∫øm "${searchTerm}"...`, key: 'search' });
      }
      
      const response = await axios.get<ApiResponse>('https://hsabook-backend-dev.up.railway.app/exams', {
        params: {
          page,
          take: pagination.pageSize,
          active: true,
          search: searchTerm
        },
        headers: {
          'Authorization': `Bearer ${token}`,
          'accept': 'application/json',
          'accept-language': 'en-US,en;q=0.9,vi;q=0.8'
        }
      });
      
      console.log("üìö ExamsListDrawer fetchExams response:", response.data);
      
      if (response.data && response.data.data && response.data.data.data) {
        const examsList = response.data.data.data;
        setExams(examsList);
        
        const paginationData = response.data.data.pagination;
        setPagination({
          current: paginationData.current_page,
          pageSize: paginationData.take,
          total: paginationData.total
        });

        // Hi·ªÉn th·ªã th√¥ng b√°o k·∫øt qu·∫£ t√¨m ki·∫øm
        if (searchTerm) {
          if (examsList.length > 0) {
            message.success({ 
              content: `T√¨m th·∫•y ${examsList.length} b·ªô ƒë·ªÅ v·ªõi t·ª´ kh√≥a "${searchTerm}"`, 
              key: 'search' 
            });
          } else {
            message.info({ 
              content: `Kh√¥ng t√¨m th·∫•y b·ªô ƒë·ªÅ n√†o v·ªõi t·ª´ kh√≥a "${searchTerm}"`, 
              key: 'search' 
            });
          }
        }
      } else {
        setExams([]);
        if (searchTerm) {
          message.info({ 
            content: `Kh√¥ng t√¨m th·∫•y b·ªô ƒë·ªÅ n√†o v·ªõi t·ª´ kh√≥a "${searchTerm}"`,
            key: 'search'
          });
        } else {
          message.warning('Kh√¥ng t√¨m th·∫•y b·ªô ƒë·ªÅ n√†o');
        }
      }
    } catch (error) {
      console.error("‚ùå ExamsListDrawer fetchExams error:", error);
      message.error({
        content: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch b·ªô ƒë·ªÅ. Vui l√≤ng th·ª≠ l·∫°i sau.',
        key: 'search'
      });
      setExams([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (open) {
      if (debouncedSearchText !== '') {
        // Ch·ªâ g·ªçi API khi ng∆∞·ªùi d√πng ƒë√£ ng·ª´ng nh·∫≠p trong 500ms v√† c√≥ t·ª´ kh√≥a t√¨m ki·∫øm
        setIsSearching(true);
        fetchExams(1, debouncedSearchText);
      }
    }
  }, [debouncedSearchText, open]);

  useEffect(() => {
    if (open) {
      fetchExams(1, searchText);
    } else {
      // Reset states when drawer closes
      setSelectedRowKeys([]);
      setSearchText('');
      setIsSearching(false);
    }
  }, [open]);

  const handleSearch = () => {
    console.log("üîç Th·ª±c hi·ªán t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a:", searchText);
    setIsSearching(true);
    fetchExams(1, searchText);
  };

  const handleTableChange = (newPagination: any) => {
    fetchExams(newPagination.current, searchText);
  };

  const handleSelectExams = () => {
    const selectedExamsList = exams.filter(exam => 
      selectedRowKeys.includes(exam.id)
    );
    
    if (selectedExamsList.length > 0) {
      onSelectExams(selectedExamsList);
      onClose();
    } else {
      message.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b·ªô ƒë·ªÅ');
    }
  };

  const renderExamStatus = (status: string) => {
    const statusMap: Record<string, { color: string; text: string }> = {
      'docx_to_html': { color: 'processing', text: 'ƒêang x·ª≠ l√Ω' },
      'done': { color: 'success', text: 'Ho√†n th√†nh' },
      'error': { color: 'error', text: 'L·ªói' },
      'none': { color: 'default', text: 'Ch∆∞a x·ª≠ l√Ω' }
    };
    
    const { color, text } = statusMap[status] || { color: 'default', text: status };
    return <Tag color={color}>{text}</Tag>;
  };

  // Th√™m h√†m highlight text t√¨m ki·∫øm
  const highlightSearchText = (text: string, searchTerm: string) => {
    if (!searchTerm || !text) return <span>{text}</span>;
    
    try {
      const regex = new RegExp(`(${searchTerm})`, 'gi');
      const parts = text.split(regex);
      
      return (
        <span>
          {parts.map((part, index) => {
            return regex.test(part) ? (
              <span key={index} className="bg-yellow-200 font-medium">{part}</span>
            ) : (
              <span key={index}>{part}</span>
            );
          })}
        </span>
      );
    } catch (e) {
      // N·∫øu c√≥ l·ªói regex, tr·∫£ v·ªÅ text g·ªëc
      return <span>{text}</span>;
    }
  };

  // C·∫≠p nh·∫≠t columns ƒë·ªÉ highlight text t√¨m ki·∫øm
  const columns = [
    {
      title: 'T√™n b·ªô ƒë·ªÅ',
      dataIndex: 'title',
      key: 'title',
      ellipsis: true,
      render: (text: string) => (
        <div className="font-medium">
          {highlightSearchText(text, searchText)}
        </div>
      )
    },
    {
      title: 'M√¥n h·ªçc',
      dataIndex: 'subject',
      key: 'subject',
      width: 120,
      render: (subject: string) => (
        <Tag color="blue">{subject || 'Ch∆∞a x√°c ƒë·ªãnh'}</Tag>
      )
    },
    {
      title: 'ID b·ªô ƒë·ªÅ',
      dataIndex: 'code_id',
      key: 'code_id',
      width: 120,
      render: (code: string) => (
        <Space>
          <span className="font-mono text-xs">{highlightSearchText(code, searchText)}</span>
          <CopyOutlined className="text-blue-500 cursor-pointer" 
            onClick={() => {
              navigator.clipboard.writeText(code);
              message.success('ƒê√£ sao ch√©p m√£ ID');
            }}
          />
        </Space>
      ),
    },
    {
      title: 'Tr·∫°ng th√°i x·ª≠ l√Ω',
      dataIndex: 'status_exam',
      key: 'status_exam',
      width: 150,
      render: (status: string) => renderExamStatus(status),
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'active',
      key: 'active',
      width: 120,
      render: (active: boolean) => (
        <Badge 
          status={active ? "success" : "default"} 
          text={active ? "K√≠ch ho·∫°t" : "V√¥ hi·ªáu"}
          className={active ? "text-green-600" : "text-gray-500"} 
        />
      ),
    },
    {
      title: 'S·ªë c√¢u h·ªèi',
      dataIndex: 'total_question',
      key: 'total_question',
      width: 100,
      align: 'center' as const,
      render: (count: number) => (
        <div className="font-medium">{count || 0}</div>
      )
    },
  ];

  const rowSelection = {
    type: 'radio' as const,
    selectedRowKeys,
    onChange: (newSelectedRowKeys: React.Key[]) => {
      setSelectedRowKeys(newSelectedRowKeys);
    },
  };

  // Th√™m ch·ª©c nƒÉng x√≥a t√¨m ki·∫øm
  const handleClearSearch = () => {
    setSearchText('');
    setIsSearching(false);
    fetchExams(1, '');
  };

  return (
    <Drawer
      title="Danh s√°ch b·ªô ƒë·ªÅ"
      placement="right"
      onClose={onClose}
      open={open}
      width="80%"
      headerStyle={{ borderBottom: '1px solid #f0f0f0', padding: '16px 24px' }}
      bodyStyle={{ padding: '24px', overflow: 'auto' }}
      extra={
        <Space>
          <Button onClick={onClose}>H·ªßy</Button>
          <Button 
            type="primary" 
            onClick={handleSelectExams}
            disabled={selectedRowKeys.length === 0}
            className="bg-green-500 hover:bg-green-600"
          >
            X√°c nh·∫≠n
          </Button>
        </Space>
      }
    >
      <div className="mb-6">
        <Input
          placeholder="Nh·∫≠p ID ho·∫∑c t√™n b·ªô ƒë·ªÅ c·∫ßn t√¨m"
          prefix={<SearchOutlined className="text-gray-400" />}
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          onPressEnter={handleSearch}
          className="rounded-lg"
          allowClear
          size="large"
          suffix={
            loading ? <LoadingOutlined spin /> : 
            <Button 
              type="primary" 
              onClick={handleSearch}
              size="small"
              className="bg-green-500 hover:bg-green-600 mr-1"
            >
              T√¨m ki·∫øm
            </Button>
          }
        />
      </div>

      {isSearching && searchText && (
        <div className="mb-4 text-sm">
          <Alert
            message={
              <span>
                {exams.length > 0 
                  ? `K·∫øt qu·∫£ t√¨m ki·∫øm cho "${searchText}": ${pagination.total} b·ªô ƒë·ªÅ` 
                  : `Kh√¥ng t√¨m th·∫•y b·ªô ƒë·ªÅ n√†o v·ªõi t·ª´ kh√≥a "${searchText}"`}
                <Button type="link" onClick={handleClearSearch} size="small">
                  X√≥a t√¨m ki·∫øm
                </Button>
              </span>
            }
            type={exams.length > 0 ? "info" : "warning"}
            showIcon
          />
        </div>
      )}

      {loading ? (
        <div className="flex items-center justify-center h-64">
          <Spin 
            indicator={<LoadingOutlined style={{ fontSize: 32 }} spin />} 
            tip="ƒêang t·∫£i b·ªô ƒë·ªÅ..."
          />
        </div>
      ) : exams.length === 0 ? (
        <Empty 
          description="Kh√¥ng t√¨m th·∫•y b·ªô ƒë·ªÅ n√†o" 
          image={Empty.PRESENTED_IMAGE_SIMPLE} 
          className="my-10"
        />
      ) : (
        <Table
          rowSelection={rowSelection}
          columns={columns}
          dataSource={exams}
          rowKey="id"
          loading={loading}
          pagination={{
            current: pagination.current,
            pageSize: pagination.pageSize,
            total: pagination.total,
            showSizeChanger: true,
            pageSizeOptions: ['10', '20', '50'],
            showTotal: (total) => `T·ªïng ${total} b·ªô ƒë·ªÅ`,
          }}
          onChange={handleTableChange}
          className="exam-list-table"
        />
      )}

      <style>
        {`
          .exam-list-table .ant-table-thead > tr > th {
            background-color: #f9fafb;
            font-weight: 500;
          }
          
          .exam-list-table .ant-table-row-selected > td {
            background-color: #f0f9ff !important;
          }
        `}
      </style>
    </Drawer>
  );
};

export default ExamsListDrawer; 